{"version":3,"sources":["common/AppHeader.js","constants/index.js","util/APIUtils.js","util/helper.js","roster/roster.js","common/NotFound.js","common/LoadingIndicator.js","app/App.js","index.js"],"names":["Header","layout_default","a","AppHeader","menuItems","react_default","createElement","menu_default","Item","key","Link","to","icon_default","type","className","mode","selectedKeys","this","props","location","pathname","style","lineHeight","Component","withRouter","API_BASE_URL","request","options","headers","Headers","Content-Type","Access-Control-Allow-Origin","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","loadRoster","fromDate","toDate","concat","method","getDate","theDate","date","Date","setTime","getMonth","getFullYear","getHoursAndMinuteOfDate","getHours","getMinutes","getSmallerDate","firstDate","secondDate","date1","date2","getTime","switchPositionBetweenDayAndMonth","tempDate","split","getFirstAndLastDayOfWeek","mon","lastDate","setDate","getDay","Roster","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadData","setState","isLoading","dates","all","values","employees","roster","events","convertStringToDateInShiftList","catch","error","notification_default","message","description","duration","shiftList","map","el","objectSpread","start","end","timeSelect","_ref","enableSelectEmployee","toConsumableArray","state","title","info","isCalendarClickable","isEmployeeSelectable","disableSelectEmployee","employeeSelect","employee","_this$state","length","selectedEvents","firstName","lastName","employeeId","id","createdDate","push","startTime","endTime","note","updateShiftList","_this$state2","ev","console","log","saveRoster","promise","rosterDetails","_this$state3","keys","employeeShifts","body","JSON","stringify","success","onNavigate","view","createDate","_this2","lib_default","selectable","localizer","BigCalendar","momentLocalizer","moment","startAccessor","endAccessor","defaultView","views","week","onSelectSlot","affix_default","position","top","right","list_default","dataSource","renderItem","item","button_default","disabled","onClick","size","NotFound","LoadingIndicator","antIcon","fontSize","spin","spin_default","indicator","display","textAlign","marginTop","Content","App","src_common_AppHeader","Switch","Route","exact","path","render","src_roster_roster","component","ReactDOM","BrowserRouter","src_app_App","document","getElementById"],"mappings":"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","file":"static/js/main.da257ddc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Link,\n    withRouter\n} from 'react-router-dom';\nimport './AppHeader.css';\nimport { Layout, Menu, Icon } from 'antd';\nconst Header = Layout.Header;\n\nclass AppHeader extends Component {\n    render() {\n        let menuItems = [\n            <Menu.Item key=\"/\">\n                <Link to=\"/\">\n                    <Icon type=\"home\" className=\"nav-icon\" />\n                </Link>\n            </Menu.Item>,\n            <Menu.Item key=\"/roster\">\n                <Link to=\"/roster/\">\n                    <span>Roster</span>\n                </Link>\n            </Menu.Item>,\n        ];\n\n        return (\n            <Header className=\"app-header\">\n                <div className=\"container\">\n                    <div className=\"app-title\" >\n                        <Link to=\"/\">Cafe Employees Management System</Link>\n                    </div>\n                    <Menu\n                        className=\"app-menu\"\n                        mode=\"horizontal\"\n                        selectedKeys={[this.props.location.pathname]}\n                        style={{ lineHeight: '64px' }} >\n                        {menuItems}\n                    </Menu>\n                </div>\n            </Header>\n        );\n    }\n}\n\nexport default withRouter(AppHeader);","export const API_BASE_URL = 'https://cafe-employee-management.herokuapp.com/api';\n//export const API_BASE_URL = 'http://localhost:8080/api';\nexport const ACCESS_TOKEN = 'accessToken';\n","import { API_BASE_URL, ACCESS_TOKEN } from '../constants';\n\nconst request = (options) => {\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': \"*\"\n    })\n\n    if(localStorage.getItem(ACCESS_TOKEN)) {\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n    }\n\n    const defaults = {headers: headers};\n    options = Object.assign({}, defaults, options);\n\n    return fetch(options.url, options)\n        .then(response =>\n            response.json().then(json => {\n                if(!response.ok) {\n                    return Promise.reject(json);\n                }\n                return json;\n            })\n        );\n};\n\nexport function loadEmployee() {\n    return request({\n        url: `${API_BASE_URL}/employee/load`,\n        method: 'GET'\n    });\n}\n\n\nexport function loadRoster(fromDate, toDate) {\n    return request({\n        url: `${API_BASE_URL}/roster/load?from=${fromDate}&to=${toDate}`,\n        method: 'GET'\n    });\n}\n\nexport function createRoster(rosterDetails) {\n    return request({\n        url: API_BASE_URL + \"/roster/create\",\n        method: 'POST',\n        body: JSON.stringify(rosterDetails)\n    });\n}\n","export function getDate(theDate) {\n    let date = new Date();\n    date.setTime(theDate);\n    return `${date.getDate()}-${date.getMonth()+1}-${date.getFullYear()}`;\n}\n\nexport function getHoursAndMinuteOfDate(theDate) {\n    let date = new Date();\n    date.setTime(theDate);\n    return `${date.getHours()}:${date.getMinutes()}`;\n}\n\nexport function getSmallerDate(firstDate, secondDate) {\n    let date1 = new Date(firstDate),\n        date2 = new Date(secondDate);\n\n    return date1.getTime() > date2.getTime() ? getDate(date2) : getDate(date1);\n}\n\nexport function switchPositionBetweenDayAndMonth(date) {\n    let tempDate = date.split(\"-\")\n\n    return `${tempDate[1]}-${tempDate[0]}-${tempDate[2]}`;\n\n}\n/**\n* Given a Date, return a new Date object for the first\n* day of the week.\n* @param {Date} date - date object\n* @param {boolean} mon - true if week starts on Monday, otherwise starts on Sunday\n*/\nexport function getFirstAndLastDayOfWeek(date, mon) {\n    let firstDate = new Date(+date);\n    let lastDate = new Date();\n\n    if (mon) {\n        firstDate.setDate(firstDate.getDate() - (firstDate.getDay() || 7) + 1);\n    } else {\n        firstDate.setDate(firstDate.getDate() - firstDate.getDay());\n    }\n\n    lastDate.setDate(firstDate.getDate() + 6);\n    return {\n        firstDate, lastDate\n    };\n}\n","import React, { Component } from 'react';\nimport { loadRoster, createRoster, loadEmployee } from '../util/APIUtils';\nimport { getHoursAndMinuteOfDate, getSmallerDate, getDate, switchPositionBetweenDayAndMonth, getFirstAndLastDayOfWeek } from '../util/helper';\nimport './roster.css';\nimport './react-big-calendar.css';\nimport { Button, List, Affix, notification } from 'antd';\nimport BigCalendar from 'react-big-calendar'\nimport moment from 'moment'\n\n\nclass Roster extends Component {\n    constructor() {\n        super()\n        this.state = {\n            employees: [],\n            events: [],\n            isLoading: false,\n            isEmployeeSelectable: false,\n            isCalendarClickable: true,\n            roster: {\n                fromDate: new Date(),\n                toDate: new Date(),\n                createDate: new Date()\n            },\n            shiftList: {}\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        this.setState({\n            isLoading: true\n        });\n        let dates = getFirstAndLastDayOfWeek(new Date(), false);\n        Promise.all([loadEmployee(), loadRoster(getDate(dates.firstDate), getDate(dates.lastDate))]).then((values)=> {\n            this.setState({\n                employees: values[0],\n                roster: values[1] ? values[1] : {},\n                events: values[1] && values[1][\"shiftList\"] ? this.convertStringToDateInShiftList(values[1][\"shiftList\"]) : [],\n                isLoading: false\n            })\n        }).catch((error) => {\n            notification.error({\n                message: 'Roster',\n                description: error,\n                duration: 2\n            });\n        });\n    }\n\n    convertStringToDateInShiftList = (shiftList) => {\n        if (!shiftList) return;\n\n        return shiftList.map((el) => {\n            return {\n                ...el,\n                start: new Date(switchPositionBetweenDayAndMonth(el.start)),\n                end: new Date(switchPositionBetweenDayAndMonth(el.end))\n            }\n        });\n    }\n\n    timeSelect = ({ start, end }) => {\n        this.enableSelectEmployee();\n        this.setState({\n            events:[\n                ...this.state.events,\n                {\n                    start,\n                    end,\n                    title: \"Please select an employee\"\n                }\n            ]\n        });\n        notification.info({\n            message: 'Roster',\n            description: 'Please select an employee for the selected shift!',\n            duration: 2\n        });\n    }\n    enableSelectEmployee = () => {\n        this.setState({\n            isCalendarClickable: false,\n            isEmployeeSelectable: true\n        })\n    }\n    disableSelectEmployee = () => {\n        this.setState({\n            isCalendarClickable: true,\n            isEmployeeSelectable: false\n        })\n    }\n    employeeSelect = (employee) => {\n        let { events, roster, shiftList } = this.state;\n        if (events.length > 0) {\n            let selectedEvents = events[events.length - 1];\n\n            selectedEvents.title = `${employee.firstName} ${employee.lastName}`;\n            selectedEvents.employeeId = employee.id;\n            events[events.length - 1] = selectedEvents;\n\n            roster.fromDate = roster.fromDate ? getSmallerDate(selectedEvents.start, roster.fromDate) : getDate(selectedEvents.start);\n            roster.toDate = roster.toDate ? getSmallerDate(selectedEvents.end, roster.toDate) : getDate(selectedEvents.end);\n            roster.createdDate = getDate(new Date());\n\n            if(!shiftList[getDate(selectedEvents.start)]) {\n                shiftList[getDate(selectedEvents.start)] = [];\n            }\n            shiftList[getDate(selectedEvents.start)].push({\n                \"startTime\": getHoursAndMinuteOfDate(selectedEvents.start),\n                \"endTime\": getHoursAndMinuteOfDate(selectedEvents.end),\n                \"note\": \"\",\n                \"employeeId\": employee.id\n            });\n\n            this.setState({\n                events,\n                roster,\n                shiftList\n            });\n        }\n        this.disableSelectEmployee();\n    }\n\n    updateShiftList = () => {\n\n        let { roster, events, shiftList } = this.state;\n\n        if (!events || events.length === 0) return [];\n\n        events.map(ev => {\n            roster.fromDate = roster.fromDate ? getSmallerDate(ev.start, roster.fromDate) : getDate(ev.start);\n            roster.toDate = roster.toDate ? getSmallerDate(ev.end, roster.toDate) : getDate(ev.end);\n\n            if(!shiftList[getDate(ev.start)]) {\n                shiftList[getDate(ev.start)] = [];\n            }\n            //console.log(ev, shiftList[getDate(ev.start)]);\n            shiftList[getDate(ev.start)].push({\n                \"startTime\": getHoursAndMinuteOfDate(ev.start),\n                \"endTime\": getHoursAndMinuteOfDate(ev.end),\n                \"note\": \"\",\n                \"employeeId\": ev.id\n            });\n        });\n        console.log(shiftList);\n        return shiftList;\n    }\n\n    saveRoster = () => {\n        let { events, roster, shiftList } = this.state;\n        //console.log(events);\n        //console.log(shiftList);\n        //console.log(this.updateShiftList());\n        if (events.length === 0 || shiftList.length === 0) {\n            notification.error({\n                message: 'Roster',\n                description: 'Please select at least a shift and an employee for create roster!',\n                duration: 5\n            });\n            return;\n        }\n        roster.shiftList = [];\n\n        Object.keys(shiftList).map((key) => {\n            roster.shiftList.push({\n                date: key,\n                employeeShifts: shiftList[key]\n            });\n        });\n\n        let promise;\n        promise = createRoster(roster);\n\n        this.setState({\n            isLoading: true\n        });\n\n        promise.then(response => {\n            if (response.success) {\n                notification.success({\n                    message: 'Roster',\n                    description: 'Create roster successfully!',\n                    duration: 5\n                });\n            } else {\n                notification.error({\n                    message: 'Roster',\n                    description: response.message,\n                    duration: 5\n                })\n            }\n\n        }).catch(error => {\n            notification.error({\n                message: 'Roster',\n                description: error,\n                duration: 5\n            })\n        })\n\n    }\n\n    onNavigate = (date, view) => {\n        let dates = getFirstAndLastDayOfWeek(date, false);\n        this.setState({\n            isLoading: true\n        })\n\n        loadRoster(getDate(dates.firstDate), getDate(dates.lastDate)).then((roster) => {\n            this.setState({\n                roster: roster ? roster : {},\n                events: roster.shiftList ? this.convertStringToDateInShiftList(roster.shiftList) : [],\n                isLoading: false\n            })\n        }).catch((error) => {\n            notification.error({\n                message: 'Roster',\n                description: error,\n                duration: 2\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"\">\n                <h1 className=\"title\">\n                    Roster\n                </h1>\n                <div className=\"desc\">\n                    <BigCalendar\n                        selectable={this.state.isCalendarClickable}\n                        localizer={BigCalendar.momentLocalizer(moment)}\n                        events={this.state.events}\n                        startAccessor=\"start\"\n                        endAccessor=\"end\"\n                        defaultView=\"week\"\n                        views={{week:true}}\n                        onSelectSlot={this.timeSelect}\n                        onNavigate={this.onNavigate}\n                    />\n                </div>\n                <Affix style={{ position: 'absolute', top: 64, right: 10}} className={\"employee-list-affix\"}>\n                    <h2>Employees</h2>\n                    <List dataSource={this.state.employees} renderItem={item => (<List.Item><Button disabled={!this.state.isEmployeeSelectable} onClick={()=>{this.employeeSelect(item)}}>{ item.firstName }</Button></List.Item>)}/>\n                </Affix>\n                <Button className=\"go-back-btn\" type=\"primary\" size=\"large\" onClick={this.saveRoster}>Save roster</Button>\n            </div>\n        );\n    }\n}\nexport default Roster;","import React, { Component } from 'react';\nimport './NotFound.css';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'antd';\n\nclass NotFound extends Component {\n    render() {\n        return (\n            <div className=\"page-not-found\">\n                <h1 className=\"title\">\n                    404\n                </h1>\n                <div className=\"desc\">\n                    The Page you're looking for was not found.\n                </div>\n                <Link to=\"/\"><Button className=\"go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\n            </div>\n        );\n    }\n}\nexport default NotFound;","import React from 'react';\nimport { Spin, Icon } from 'antd';\n\nexport default function LoadingIndicator(props) {\n    const antIcon = <Icon type=\"loading-3-quarters\" style={{ fontSize: 30 }} spin />;\n    return (\n        <Spin indicator={antIcon} style = {{display: 'block', textAlign: 'center', marginTop: 30}} />\n    );\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {\n    Route,\n    withRouter,\n    Switch\n} from 'react-router-dom';\nimport AppHeader from '../common/AppHeader'\nimport Roster from '../roster/roster'\nimport NotFound from '../common/NotFound'\nimport { Layout } from 'antd'\nimport LoadingIndicator from '../common/LoadingIndicator'\nconst { Content } = Layout\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false\n        }\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return <LoadingIndicator />\n        }\n\n        return (\n            <Layout className=\"app-container\">\n                <AppHeader />\n                <Content className=\"app-content\">\n                    <div className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\" render={(props) => <Roster {...props} />}>\n                            </Route>\n                            <Route component={ NotFound }></Route>\n                        </Switch>\n                    </div>\n                </Content>\n            </Layout>\n        )\n    }\n}\nexport default withRouter(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);"],"sourceRoot":""}